{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","severityLevels","jsonData","severity","critical","toLowerCase","high","warning","info","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","encodeURIComponent","replace","expr","scopedVars","datasourceRequest","method","headers","then","results","response","columnsDict","getColumnsDict","columns","getColumns","i","row","Array","fill","item","Date","parse","Object","keys","label","annotation","rows","push","now","text","column","index","status","message","title","target","targetss","map","refId","legendFormat","labels","JSON","stringify","aliasRegex","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.severityLevels = {};\r\n    this.severityLevels[instanceSettings.jsonData.severity.critical.toLowerCase()]  = 4;\r\n    this.severityLevels[instanceSettings.jsonData.severity.high.toLowerCase()]      = 3;\r\n    this.severityLevels[instanceSettings.jsonData.severity.warning.toLowerCase()]   = 2;\r\n    this.severityLevels[instanceSettings.jsonData.severity.info.toLowerCase()]      = 1;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n  }\r\n\r\n    query(options) {\r\n        let query = this.buildQueryParameters(options);\r\n        query.targets = query.targets.filter(t => !t.hide);\r\n\r\n        if (query.targets.length <= 0) {\r\n            return this.q.when({data: []});\r\n        }\r\n        // Format data for table panel\r\n        if(query.targets[0].type === \"table\"){\r\n            let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\r\n            return this.backendSrv.datasourceRequest({\r\n                    url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\r\n                    data: query,\r\n                    method: 'GET',\r\n                    headers: { 'Content-Type': 'application/json' }\r\n                }).then(response => {\r\n                    let results = {\r\n                        \"data\": [{\r\n                            \"rows\": [],\r\n                            \"columns\": [],\r\n                            \"type\": \"table\"\r\n                            }\r\n                        ]\r\n                    };\r\n\r\n                if(response.data && response.data.data && response.data.data.length) {\r\n                    let columnsDict = this.getColumnsDict(response.data.data);\r\n                    results.data[0].columns = this.getColumns(columnsDict);\r\n\r\n                    for (let i = 0; i < response.data.data.length; i++) {\r\n                        let row = new Array(results.data[0].columns.length).fill(\"\");\r\n                        let item = response.data.data[i];\r\n                        row[0] = [Date.parse(item['startsAt'])];\r\n\r\n                        for (let label of Object.keys(item['labels'])) {\r\n                            if(label in columnsDict) {\r\n                                if(label === 'severity') {\r\n                                    row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\r\n                                }\r\n                                else {\r\n                                    row[columnsDict[label]] = item['labels'][label];\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        for (let annotation of Object.keys(item['annotations'])) {\r\n                            if(annotation in columnsDict) {\r\n                                row[columnsDict[annotation]] = item['annotations'][annotation];\r\n                            }\r\n                        }\r\n                        results.data[0].rows.push(row);\r\n                    }\r\n                }\r\n                return results;\r\n            });\r\n        } else {\r\n            let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\r\n                return this.backendSrv.datasourceRequest({\r\n                url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\r\n                data: query,\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }).then(response => {\r\n                return {\r\n                    \"data\": [{ \"datapoints\": [ [response.data.data.length, Date.now()] ]}]\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getColumns(columnsDict) {\r\n        let columns =  [{ text: \"Time\", type: \"time\" }];\r\n        for(let column of Object.keys(columnsDict)) {\r\n            columns.push({ text: column, type: \"string\" })\r\n        }\r\n        return columns;\r\n    }\r\n\r\n    // Creates a column index dictionary in to assist in data row construction\r\n    getColumnsDict(data) {\r\n        let index = 1; // 0 is the data column\r\n        let columnsDict = {};\r\n        for (let i = 0; i < data.length; i++) {\r\n            for (let label of Object.keys(data[i]['labels'])) {\r\n                if(!(label in columnsDict) && label !== 'severity') {\r\n                    columnsDict[label] = index++;\r\n                }\r\n            }\r\n            for (let annotation of Object.keys(data[i]['annotations'])) {\r\n                if(!(annotation in columnsDict)) {\r\n                    columnsDict[annotation] = index++;\r\n                }\r\n            }\r\n        }\r\n        columnsDict['severity'] = index;\r\n        return columnsDict;\r\n    }\r\n\r\n    testDatasource() {\r\n        return this.backendSrv.datasourceRequest({\r\n            url: this.url + '/api/v1/status',\r\n            method: 'GET'\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n            }\r\n        });\r\n    }\r\n\r\n    buildQueryParameters(options) {\r\n        //remove placeholder targets\r\n          options.targets = _.filter(options.targets, target => {\r\n          return target.target !== 'select metric';\r\n        });\r\n          options.targetss = _.map(options.targets, target => {\r\n          return {\r\n            target: this.templateSrv.replace(target.target),\r\n            expr: target.expr,\r\n            refId: target.refId,\r\n            hide: target.hide,\r\n            type: target.type || 'single',\r\n            legendFormat: target.legendFormat || \"\"\r\n          };\r\n        });\r\n        return options;\r\n      }\r\n\r\n    formatInstanceText(labels, legendFormat){\r\n    if(legendFormat === \"\"){\r\n      return JSON.stringify(labels);\r\n    }\r\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\r\n    return legendFormat.replace(aliasRegex, function(match, g1) {\r\n      if (labels[g1]) {\r\n        return labels[g1];\r\n      }\r\n      return \"\";\r\n    });\r\n  }\r\n}\r\n"]}