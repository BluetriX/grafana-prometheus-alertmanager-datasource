{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","severityLevels","jsonData","severity_critical","toLowerCase","severity_high","severity_warning","severity_info","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","labelSelector","parseLabelSelector","encodeURIComponent","replace","expr","scopedVars","datasourceRequest","method","headers","then","results","response","columnsDict","getColumnsDict","columns","getColumns","i","row","Array","fill","item","Date","parse","Object","keys","label","annotation","rows","push","now","text","column","input","map","trim","split","index","labelIndex","selectedLabel","status","message","title","target","targetss","refId","legendFormat","labels","JSON","stringify","aliasRegex","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.severityLevels = {}\n    this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()]  = 4;\n    this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()]      = 3;\n    this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()]   = 2;\n    this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()]      = 1;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    // Format data for table panel\n    if(query.targets[0].type === \"table\"){\n      var labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n      let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        let results = {\n          \"data\": [{\n            \"rows\": [],\n            \"columns\": [],\n            \"type\": \"table\"\n          }]\n        };\n\n        if(response.data && response.data.data && response.data.data.length) {\n          let columnsDict = this.getColumnsDict(response.data.data, labelSelector);\n          results.data[0].columns = this.getColumns(columnsDict);\n\n          for (let i = 0; i < response.data.data.length; i++) {\n            let row = new Array(results.data[0].columns.length).fill(\"\");\n            let item = response.data.data[i];\n            row[0] = [Date.parse(item['startsAt'])];\n\n            for (let label of Object.keys(item['labels'])) {\n              if(label in columnsDict) {\n                if(label === 'severity') {\n                  row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\n                } else {\n                  row[columnsDict[label]] = item['labels'][label];\n                }\n              }\n            }\n            for (let annotation of Object.keys(item['annotations'])) {\n              if(annotation in columnsDict) {\n                row[columnsDict[annotation]] = item['annotations'][annotation];\n              }\n            }\n            results.data[0].rows.push(row);\n          }\n        }\n        return results;\n      });\n    } else {\n      let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        return {\n          \"data\": [{ \"datapoints\": [ [response.data.data.length, Date.now()] ]}]\n        }\n      });\n    }\n  }\n\n  getColumns(columnsDict) {\n    let columns =  [{ text: \"Time\", type: \"time\" }];\n    for(let column of Object.keys(columnsDict)) {\n      columns.push({ text: column, type: \"string\" })\n    }\n    return columns;\n  }\n\n  // Parses the label list into a map\n  parseLabelSelector(input) {\n    var map;\n    if (typeof(input) === \"undefined\" || input.trim().length === 0) {\n      map = [\"*\"];\n    } else {\n      map = input.trim().split(/\\s*,\\s*/);\n    }\n    return map;\n  }\n\n  // Creates a column index dictionary in to assist in data row construction\n  getColumnsDict(data, labelSelector) {\n    let index = 1; // 0 is the data column\n    let columnsDict = {};\n    for (let i = 0; i < data.length; i++) {\n      for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n        var selectedLabel = labelSelector[labelIndex];\n        if (selectedLabel === \"*\") {\n          // '*' maps to all labels/annotations not already added via the label selector list\n          for (let label of Object.keys(data[i]['labels'])) {\n            if(!(label in columnsDict) && label !== 'severity') {\n              columnsDict[label] = index++;\n            }\n          }\n          for (let annotation of Object.keys(data[i]['annotations'])) {\n            if(!(annotation in columnsDict)) {\n              columnsDict[annotation] = index++;\n            }\n          }\n        } else if (!(selectedLabel in columnsDict)) {\n          columnsDict[selectedLabel] = index++;\n        }\n      }\n    }\n    columnsDict['severity'] = index;\n    return columnsDict;\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v1/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n    options.targetss = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        expr: target.expr,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'single',\n        legendFormat: target.legendFormat || \"\"\n      };\n    });\n    return options;\n  }\n\n  formatInstanceText(labels, legendFormat){\n    if(legendFormat === \"\"){\n      return JSON.stringify(labels);\n    }\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n  }\n}\n"]}