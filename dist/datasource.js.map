{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","severityLevels","jsonData","severity","critical","toLowerCase","high","warning","info","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","encodeURIComponent","replace","expr","scopedVars","datasourceRequest","method","headers","then","results","response","labels","columns","getColumns","i","item","labelValues","Object","values","annotationValues","annotations","row","Date","parse","startsAt","concat","push","rows","now","dataRow","text","keys","label","annotation","status","message","title","target","targetss","map","refId","legendFormat","JSON","stringify","aliasRegex","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.severityLevels = {};\r\n    this.severityLevels[instanceSettings.jsonData.severity.critical.toLowerCase()]  = 4;\r\n    this.severityLevels[instanceSettings.jsonData.severity.high.toLowerCase()]      = 3;\r\n    this.severityLevels[instanceSettings.jsonData.severity.warning.toLowerCase()]   = 2;\r\n    this.severityLevels[instanceSettings.jsonData.severity.info.toLowerCase()]      = 1;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n  }\r\n\r\n  query(options) {\r\n    var query = this.buildQueryParameters(options);\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({data: []});\r\n    }\r\n    // Format data for table panel\r\n    if(query.targets[0].type === \"table\"){\r\n      let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\r\n      return this.backendSrv.datasourceRequest({\r\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\r\n        data: query,\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }).then(response => {\r\n          let results = {\r\n              \"data\": [{\r\n                  \"rows\": [],\r\n                  \"columns\": [],\r\n                  \"type\": \"table\"\r\n              }]\r\n          };\r\n\r\n          if(response.data && response.data.data && response.data.data.length) {\r\n              let severity = response.data.data[0].labels.severity;\r\n              delete response.data.data[0].labels.severity;\r\n              results.data[0].columns = this.getColumns(response.data.data[0]);\r\n              for (let i = 0; i < response.data.data.length; i++) {\r\n                  let item = response.data.data[i];\r\n                  delete item.labels.severity;\r\n                  let labelValues = Object.values(item.labels);\r\n                  let annotationValues = Object.values(item.annotations);\r\n                  let row = [Date.parse(item.startsAt)].concat(labelValues).concat(annotationValues);\r\n                  row.push([this.severityLevels[severity]]);\r\n                  results.data[0].rows.push(row);\r\n              }\r\n          }\r\n          return results;\r\n      });\r\n    }else{\r\n      let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\r\n      return this.backendSrv.datasourceRequest({\r\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\r\n        data: query,\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }).then(response => {\r\n        return {\r\n          \"data\": [\r\n            {\r\n              \"datapoints\": [\r\n                [response.data.data.length, Date.now()]\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n    getColumns(dataRow) {\r\n        let columns =  [{ text: \"Time\", type: \"time\" }];\r\n        for(let label of Object.keys(dataRow.labels)) {\r\n            columns.push({ text: label, type: \"string\" })\r\n        }\r\n        for(let annotation of Object.keys(dataRow['annotations'])) {\r\n            columns.push({ text: annotation, type: \"string\" })\r\n        }\r\n        columns.push({ text: \"severity\", type: \"string\" });\r\n        return columns;\r\n    }\r\n\r\n  testDatasource() {\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/api/v1/status',\r\n      method: 'GET'\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n      }\r\n    });\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n    //remove placeholder targets\r\n      options.targets = _.filter(options.targets, target => {\r\n      return target.target !== 'select metric';\r\n    });\r\n      options.targetss = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(target.target),\r\n        expr: target.expr,\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || 'single',\r\n        legendFormat: target.legendFormat || \"\"\r\n      };\r\n    });\r\n    return options;\r\n  }\r\n\r\n  formatInstanceText(labels, legendFormat){\r\n    if(legendFormat === \"\"){\r\n      return JSON.stringify(labels);\r\n    }\r\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\r\n    return legendFormat.replace(aliasRegex, function(match, g1) {\r\n      if (labels[g1]) {\r\n        return labels[g1];\r\n      }\r\n      return \"\";\r\n    });\r\n  }\r\n}\r\n"]}